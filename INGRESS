https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/deploy/installation/
===INGRESS==============
1.route53 domain
2.drive ingress & helm e
1.eksctl utils associate-iam-oidc-provider \
    --region <region-code> \
    --cluster <your-cluster-name> \
    --approve
2.curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
3.aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam-policy.json
4.eksctl create iamserviceaccount \
--cluster=devops \
--namespace=kube-system \
--name=aws-load-balancer-controller \
--attach-policy-arn=arn:aws:iam::888888888888:policy/AWSLoadBalancerControllerIAMPolicy \
--override-existing-serviceaccounts \
--region us-east-1 \
--approve	
5.helm
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
6.
helm repo add eks https://aws.github.io/eks-charts
7.helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=devops --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
Dockerfile
FROM nginx
RUN rm -rf /usr/share/nginx/html/index.html
RUN echo "<h1>Hello, I am from dev-1</h1>" > /usr/share/nginx/html/index.html
=============dev1.restartpro.xyz
kind: Deployment
apiVersion: apps/v1
metadata:
  name: dev1
  # these labels are deployment related labels
  labels:
    app: dev1
    purpose: ingress
spec:
  selector:
    matchLabels:
      app: dev1
      purpose: ingress
  # pod definition
  template:
    metadata:
      labels:
        app: dev1
        purpose: ingress
    spec:
      containers:
      - name: dev1
        image: venutej220/dev1:v1
---
apiVersion: v1
kind: Service
metadata:
  name: dev1
spec:
  selector:
    app: dev1
    purpose: ingress
  ports:
  - protocol: TCP
    port: 80 #service-port
    targetPort: 80 #target-port
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev1
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: Environment=dev,Team=dev
    alb.ingress.kubernetes.io/group.name: devops
spec:
  ingressClassName: alb
  rules:
  - host: "dev1.restartpro.xyz" # ALB Rule
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: dev1 # ALB Target group
            port:
              number: 80
===============================dev2.restartpro.xyz
Dockerfile
FROM nginx
RUN rm -rf /usr/share/nginx/html/index.html
RUN echo "<h1>Hello, I am from dev-1</h1>" > /usr/share/nginx/html/index.html
===
kind: Deployment
apiVersion: apps/v1
metadata:
  name: dev2
  # these labels are deployment related labels
  labels:
    app: dev2
    purpose: ingress
spec:
  selector:
    matchLabels:
      app: dev2
      purpose: ingress
  # pod definition
  template:
    metadata:
      labels:
        app: dev2
        purpose: ingress
    spec:
      containers:
      - name: dev2
        image: venutej220/dev2:v1
---
apiVersion: v1
kind: Service
metadata:
  name: dev2
spec:
  selector:
    app: dev2
    purpose: ingress
  ports:
  - protocol: TCP
    port: 80 #service-port
    targetPort: 80 #target-port
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev2
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: Environment=dev,Team=dev
# this annotation is useful to keep only ALB under dev group. if you don't give this it will create another ALB
    alb.ingress.kubernetes.io/group.name: devops
spec:
  ingressClassName: alb
  rules:
  - host: "dev2.restartpro.xyz" # ALB Rule
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: dev2 # ALB Target group
            port:
              number: 80
==================================================To change your Ingress from port 80 (HTTP) to port 443 (HTTPS),
you need to:

Add TLS configuration under the spec section.

Change the backend port (if your service listens on 443).

Ensure your ALB is configured for HTTPS with a valid SSL certificate (from ACM).

Here‚Äôs your corrected Ingress manifest updated for port 443 / HTTPS:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev1
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: Environment=dev,Team=dev
    alb.ingress.kubernetes.io/group.name: devops
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-south-1:123456789012:certificate/your-acm-cert-id
spec:
  ingressClassName: alb
  tls:
  - hosts:
      - dev1.restartpro.xyz
    secretName: dev1-tls-secret  # (Optional if ALB handles SSL via ACM)
  rules:
  - host: "dev1.restartpro.xyz"
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: dev1
            port:
              number: 80   # keep 80 if your service listens on 80; ALB terminates HTTPS

üîç Explanation:

alb.ingress.kubernetes.io/listen-ports ‚Üí tells ALB to listen on port 443 (HTTPS).

alb.ingress.kubernetes.io/certificate-arn ‚Üí must point to your AWS ACM certificate for dev1.restartpro.xyz.

tls: ‚Üí optional if SSL termination happens at the ALB. You can include it if you also use K8s secrets.

Backend port.number: 80 remains as-is because ALB does SSL termination ‚Äî it decrypts HTTPS traffic and forwards plain HTTP (port 80) to your service
