‚öôÔ∏è Step-by-Step Process
====================================================================================
‚öôÔ∏è Step-by-Step Process
Step 1: Login to Azure
az login


This opens a browser window for your Azure account login.

Step 2: Set Your Variables (Optional)

It‚Äôs easier if you set names as variables:

RESOURCE_GROUP=devops-rg
ACR_NAME=venuacr
LOCATION=eastus

Step 3: Create a Resource Group (if not already)
az group create --name $RESOURCE_GROUP --location $LOCATION

Step 4: Create the ACR
az acr create \
  --resource-group $RESOURCE_GROUP \
  --name $ACR_NAME \
  --sku Basic \
  --admin-enabled true


‚úÖ This creates your registry: venuacr.azurecr.io
(--admin-enabled true allows username/password access ‚Äî useful for testing or small setups.)

Step 5: Login to ACR
az acr login --name $ACR_NAME


If successful, you‚Äôll see:

Login succeeded

Step 6: Build Your Docker Image

If you already have a Dockerfile, run:

docker build -t myapp:latest .

Step 7: Tag the Image for ACR

You need to tag it with your ACR login server name:

docker tag myapp:latest venuacr.azurecr.io/myapp:latest

Step 8: Push the Image to ACR
docker push venuacr.azurecr.io/myapp:latest


This uploads the image layers to your ACR.

Step 9: Verify the Image in ACR

You can check from CLI:

az acr repository list --name $ACR_NAME --output table


Or from the Azure Portal ‚Üí Container Registries ‚Üí Repositories.

Step 10: Pull the Image (Optional Test)

From anywhere (after login):

az acr login --name $ACR_NAME
docker pull venuacr.azurecr.io/myapp:latest
Step 1: Get ACR Credentials

Run this command to get your ACR username and password:

az acr credential show --name <your-acr-name>

=====================================================================================================================
Example:

az acr credential show --name venuacr


Output will show:

{
  "passwords": [
    {
      "name": "password",
      "value": "p@ssw0rdExample123"
    }
  ],
  "username": "venuacr"
}


üîπ Copy the username and password.value.

Step 2: Create the Kubernetes Secret

Now, create a Docker registry secret in the same namespace where your app will run.

kubectl create secret docker-registry acr-secret \
  --docker-server=<your-acr-name>.azurecr.io \
  --docker-username=<acr-username> \
  --docker-password=<acr-password> \
  --docker-email=<any-email@example.com>


Example:

kubectl create secret docker-registry acr-secret \
  --docker-server=venuacr.azurecr.io \
  --docker-username=venuacr \
  --docker-password=p@ssw0rdExample123 \
  --docker-email=venu@example.com


‚úÖ This creates a secret named acr-secret in your current namespace.

Step 3: Verify the Secret

Check that the secret exists:

kubectl get secret acr-secret --output=yaml

Step 4: Attach Secret in Deployment YAML

In your Deployment manifest, under the spec.template.spec, add the imagePullSecrets section.

Example:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: devops-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: devops-demo
  template:
    metadata:
      labels:
        app: devops-demo
    spec:
      containers:
      - name: devops-demo
        image: venuacr.azurecr.io/devops-app:latest
        ports:
        - containerPort: 80
      imagePullSecrets:
      - name: acr-secret

Step 5: Apply the Deployment
kubectl apply -f deployment.yaml

Step 6: Verify Image Pull

Check pod status:

kubectl get pods
kubectl describe pod <pod-name>


If the imagePullSecret works correctly, you‚Äôll not see any ImagePullBackOff or ErrImagePull errors.
